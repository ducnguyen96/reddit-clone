// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type RegisterResult interface {
	IsRegisterResult()
}

type CustomError struct {
	Message string `json:"message"`
	Path    string `json:"path"`
}

type RegisterBadRequest struct {
	Errors []*CustomError `json:"errors"`
}

func (RegisterBadRequest) IsRegisterResult() {}

type RegisterInternalServerError struct {
	Error *CustomError `json:"error"`
}

func (RegisterInternalServerError) IsRegisterResult() {}

type RegisterPayload struct {
	User  *User            `json:"user"`
	Token *TokenPayloadDto `json:"token"`
}

func (RegisterPayload) IsRegisterResult() {}

type TokenPayloadDto struct {
	ExpiresIn   *int    `json:"expiresIn"`
	AccessToken *string `json:"accessToken"`
}

type User struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

type UserLoginInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type UserRegisterInput struct {
	Username       string `json:"username"`
	Password       string `json:"password"`
	RepeatPassword string `json:"repeatPassword"`
}

type Gender string

const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GENDER", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
